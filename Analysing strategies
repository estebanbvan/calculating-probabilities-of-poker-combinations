import itertools
import random

# Все возможные масти и ранги карт
ranks = "23456789TJQKA"
suits = "♠️♥️♦️♣️"
deck = [r + s for r in ranks for s in suits]

# Оценка комбинации (аналогично предыдущему коду)
def evaluate_hand(hand):
    """ Возвращает (ранг комбинации, список карт) """
    values = sorted([ranks.index(card[0]) for card in hand], reverse=True)
    suits_count = {s: 0 for s in suits}
    ranks_count = {r: 0 for r in ranks}

    for card in hand:
        rank, suit = card[0], card[1]
        suits_count[suit] += 1
        ranks_count[rank] += 1

    flush_suit = next((s for s, c in suits_count.items() if c >= 5), None)
    flush_cards = sorted([ranks.index(card[0]) for card in hand if card[1] == flush_suit], reverse=True) if flush_suit else []

    sorted_values = sorted(set(values), reverse=True)
    straight_high = next((sorted_values[i] for i in range(len(sorted_values) - 4) if sorted_values[i] - sorted_values[i+4] == 4), None)

    if flush_suit and straight_high:
        return (8, flush_cards[:5])  # Стрит-флеш
    if flush_suit:
        return (5, flush_cards[:5])  # Флеш
    if straight_high:
        return (4, [straight_high])  # Стрит

    rank_counts = sorted(ranks_count.items(), key=lambda x: (-x[1], -ranks.index(x[0])))
    best_hand = [ranks.index(rc[0]) for rc in rank_counts]

    if rank_counts[0][1] == 4:
        return (7, best_hand[:4])  # Каре
    if rank_counts[0][1] == 3 and rank_counts[1][1] >= 2:
        return (6, best_hand[:5])  # Фулл-хаус
    if rank_counts[0][1] == 3:
        return (3, best_hand[:3])  # Сет
    if rank_counts[0][1] == 2 and rank_counts[1][1] == 2:
        return (2, best_hand[:4])  # Две пары
    if rank_counts[0][1] == 2:
        return (1, best_hand[:2])  # Одна пара

    return (0, best_hand[:5])  # Старшая карта

# Расчет вероятностей победы
def calculate_win_probability(player_hand, board, simulations=10000):
    available_cards = [card for card in deck if card not in player_hand + board]
    wins, ties, losses = 0, 0, 0

    for _ in range(simulations):
        random.shuffle(available_cards)
        opponent_hand = available_cards[:2]
        community_cards = board + available_cards[2:7-len(board)]
        
        player_score = evaluate_hand(player_hand + community_cards)
        opp_score = evaluate_hand(opponent_hand + community_cards)

        if player_score > opp_score:
            wins += 1
        elif player_score < opp_score:
            losses += 1
        else:
            ties += 1

    total = wins + ties + losses
    return {
        "win": wins / total * 100,
        "tie": ties / total * 100,
        "loss": losses / total * 100
    }

# Функция для анализа стратегии
def analyze_strategy(player_hand, board, pot_size, bet_amount):
    """ Анализирует ситуацию и дает совет по ставке """
    odds = calculate_win_probability(player_hand, board)
    win_chance = odds["win"] / 100
    tie_chance = odds["tie"] / 100

    # Пот-оддсы (шанс банка)
    call_odds = bet_amount / (pot_size + bet_amount)

    # Решение на основе шансов
    if win_chance > call_odds:
        advice = "CALL / RAISE (прибыльная ставка)"
    elif win_chance + tie_chance > call_odds:
        advice = "CALL (граница прибыльности)"
    else:
        advice = "FOLD (невыгодно)"

    # Олл-ин, если шанс на победу > 70%
    if win_chance > 0.7:
        advice = "ALL-IN (очень сильная рука)"

    return {
        "win_chance": round(win_chance * 100, 2),
        "tie_chance": round(tie_chance * 100, 2),
        "advice": advice
    }

# Пример использования
player_hand = ["A♠️", "K♦️"]
board = ["2♠️", "7♥️", "J♦️"]
pot_size = 100
bet_amount = 50

strategy = analyze_strategy(player_hand, board, pot_size, bet_amount)

print(f"Шанс на победу: {strategy['win_chance']}%")
print(f"Шанс на ничью: {strategy['tie_chance']}%")
print(f"Совет: {strategy['advice']}")
